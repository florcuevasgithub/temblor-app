# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v4DIpp5J0nrnrnLmC6D6ysb8hmdwz4DN
"""

# app.py
import streamlit as st
import base64
from io import BytesIO


# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq, rfft, rfftfreq
from fpdf import FPDF
import tempfile
import os
from datetime import datetime
from scipy.signal import butter, filtfilt, windows

# Procesamiento del archivo
def procesar_archivo(uploaded_file):
    datos_completos = pd.read_csv(uploaded_file)
    datos_personales = datos_completos.iloc[0, :].to_frame().T
    datos_personales.reset_index(drop=True, inplace=True)
    mediciones = datos_completos.iloc[1:, :]
    mediciones = mediciones[['Acel_X', 'Acel_Y', 'Acel_Z', 'GiroX', 'GiroY', 'GiroZ']]
    mediciones = mediciones.apply(pd.to_numeric, errors='coerce')
    return datos_personales, mediciones

# An√°lisis de bandas de frecuencia
def analizar_bandas_frecuencia(frecuencias, amplitudes):
    bandas = {
        "Baja (<4 Hz)": (frecuencias >= 1) & (frecuencias < 4),
        "Parkinson (4-6 Hz)": (frecuencias >= 4) & (frecuencias <= 6),
        "Temblor Esencial (6-12 Hz)": (frecuencias > 6) & (frecuencias <= 12),
        "Alta (>12 Hz)": (frecuencias > 12) & (frecuencias <= 20)
    }

    energia_total = np.sum(amplitudes ** 2)
    energia_bandas = {}
    for nombre, filtro in bandas.items():
        energia = np.sum(amplitudes[filtro] ** 2)
        energia_bandas[nombre] = energia / energia_total if energia_total != 0 else 0

    return energia_bandas

# Filtro y an√°lisis por se√±al
def analizar_senal(test_name, se√±al, sample_rate=200):
    def aplicar_filtro(se√±al, fs, low=2, high=14):
        b, a = butter(N=4, Wn=[low, high], btype='bandpass', fs=fs)
        return filtfilt(b, a, se√±al)

    se√±al_filtrada = aplicar_filtro(se√±al, sample_rate)
    ventana = windows.hann(len(se√±al_filtrada))
    se√±al_windowed = se√±al_filtrada * ventana
    fft_valores = fft(se√±al_windowed)
    frecuencias = fftfreq(len(se√±al_filtrada), d=1/sample_rate)
    amplitudes = np.abs(fft_valores)

    frecuencias_positivas = frecuencias[:len(frecuencias) // 2]
    amplitudes_positivas = amplitudes[:len(amplitudes) // 2]
    filtro = (frecuencias_positivas >= 1) & (frecuencias_positivas <= 14)
    frecuencias_filtradas = frecuencias_positivas[filtro]
    amplitudes_filtradas = amplitudes_positivas[filtro]

    frecuencia_dominante = frecuencias_filtradas[np.argmax(amplitudes_filtradas)]
    amplitudes_cm = (amplitudes_filtradas / ((2 * np.pi * frecuencias_filtradas) ** 2)) * 100
    amplitudes_cm = np.nan_to_num(amplitudes_cm)

    varianza = np.var(se√±al_filtrada)
    rms = np.sqrt(np.mean(se√±al_filtrada**2))
    max_desplazamiento = np.max(amplitudes_cm)

    fig, ax = plt.subplots()
    ax.plot(frecuencias_filtradas, amplitudes_cm)
    ax.set_title(f"FFT {test_name}")
    ax.set_xlabel("Frecuencia (Hz)")
    ax.set_ylabel("Amplitud (cm)")
    ax.grid(True)

    img_path = tempfile.NamedTemporaryFile(delete=False, suffix=".png").name
    fig.savefig(img_path)
    plt.close(fig)

    return [test_name, frecuencia_dominante, varianza, rms, max_desplazamiento], img_path

# An√°lisis completo de mediciones
def analizar_mediciones(test_name, mediciones):
    acel = np.sqrt(mediciones['Acel_X']**2 + mediciones['Acel_Y']**2 + mediciones['Acel_Z']**2).dropna().values
    giro = np.sqrt(mediciones['GiroX']**2 + mediciones['GiroY']**2 + mediciones['GiroZ']**2).dropna().values

    resultados = []
    imagenes = []

    for tipo, se√±al in [('Aceleracion', acel), ('Giroscopio', giro)]:
        resultado, img_path = analizar_senal(f"{test_name} - {tipo}", se√±al)
        resultados.append([test_name, tipo] + resultado[1:])
        imagenes.append((test_name, tipo, img_path))

    return resultados, imagenes

# Diagn√≥stico global
def diagnostico_global(resultados):
    posibles_diagnosticos = []
    comparativo = []
    for fila in resultados:
        test, tipo, freq, _, _, max_disp = fila
        if 4 <= freq <= 6 and max_disp > 0.5:
            diag = "Posible Parkinson"
            posibles_diagnosticos.append("Parkinson")
        elif 6 < freq <= 12 and max_disp <= 1.5:
            diag = "Posible Temblor Esencial"
            posibles_diagnosticos.append("Temblor Esencial")
        else:
            diag = "Normal"
        comparativo.append([test, tipo, diag])

    if posibles_diagnosticos.count("Parkinson") > posibles_diagnosticos.count("Temblor Esencial"):
        return comparativo, "Posible Parkinson"
    elif posibles_diagnosticos.count("Temblor Esencial") > posibles_diagnosticos.count("Parkinson"):
        return comparativo, "Posible Temblor Esencial"
    else:
        return comparativo, "Normal"

# Generador de PDF
def generar_pdf(datos_personales, resultados, comparativo, global_diag, imagenes, incluir_graficos=True):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, "Informe de Diagn√≥stico de Temblor", ln=True, align='C')
    pdf.ln(5)

    pdf.set_font("Arial", '', 10)
    fecha = datetime.now().strftime("%d/%m/%Y %H:%M")
    pdf.cell(0, 10, f"Fecha del informe: {fecha}", ln=True)
    pdf.ln(5)

    # Datos personales
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Informaci√≥n del Paciente:", ln=True)
    pdf.set_font("Arial", '', 10)
    for col in datos_personales.columns:
        val = datos_personales[col].values[0]
        if pd.notna(val) and str(val).strip().lower() not in ["nan", "sin info", "none", ""]:
            pdf.cell(0, 8, f"{col}: {val}", ln=True)
    pdf.ln(5)

    # Resultados
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Resultados del An√°lisis:", ln=True)
    pdf.set_font("Arial", 'B', 9)
    pdf.cell(30, 8, "Test", 1)
    pdf.cell(30, 8, "Tipo", 1)
    pdf.cell(35, 8, "Frecuencia (Hz)", 1)
    pdf.cell(30, 8, "Varianza", 1)
    pdf.cell(25, 8, "RMS", 1)
    pdf.cell(40, 8, "Amplitud Max (cm)", 1)
    pdf.ln()
    pdf.set_font("Arial", '', 9)
    for r in resultados:
        pdf.cell(30, 8, r[0], 1)
        pdf.cell(30, 8, r[1], 1)
        pdf.cell(35, 8, f"{r[2]:.2f}", 1)
        pdf.cell(30, 8, f"{r[3]:.2f}", 1)
        pdf.cell(25, 8, f"{r[4]:.2f}", 1)
        pdf.cell(40, 8, f"{r[5]:.2f}", 1)
        pdf.ln()
    pdf.ln(5)

    # Conclusi√≥n
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Conclusi√≥n Preliminar:", ln=True)
    pdf.set_font("Arial", '', 10)
    if global_diag == "Posible Parkinson":
        texto_diag = "El an√°lisis muestra frecuencias entre 4 y 6 Hz con amplitudes moderadas, compatible con temblor Parkinsoniano."
    elif global_diag == "Posible Temblor Esencial":
        texto_diag = "El an√°lisis presenta frecuencias de 6-12 Hz con amplitudes bajas, compatible con Temblor Esencial."
    else:
        texto_diag = "No se identificaron patrones compatibles con temblores patol√≥gicos claros."
    pdf.multi_cell(0, 8, texto_diag)
    pdf.ln(5)

    # Diagn√≥stico Comparativo
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Detalles del Diagn√≥stico Comparativo:", ln=True)
    pdf.set_font("Arial", '', 10)
    for fila in comparativo:
        pdf.cell(0, 8, f"{fila[0]} - {fila[1]}: {fila[2]}", ln=True)
    pdf.cell(0, 10, f"\nDiagn√≥stico Global Sugerido: {global_diag}", ln=True)

    if incluir_graficos:
        for test, tipo, img in imagenes:
            pdf.add_page()
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(0, 10, f"Gr√°fico {test} - {tipo}", ln=True)
            pdf.image(img, x=10, y=30, w=180)
    return pdf

st.set_page_config(page_title="An√°lisis de Temblor", layout="centered")

st.title("üß† An√°lisis de Temblor - Informe PDF")
st.write("Sub√≠ un archivo CSV con los datos de un paciente para generar su informe cl√≠nico.")

uploaded_file = st.file_uploader("Eleg√≠ el archivo CSV", type=["csv"])

if uploaded_file is not None:
    try:
        datos_personales, mediciones = procesar_archivo(uploaded_file)

        st.subheader("‚úÖ Datos personales cargados:")
        st.dataframe(datos_personales)

        st.subheader("‚öôÔ∏è Analizando mediciones...")
        resultados = []
        imagenes = []

        for test_name in ["Reposo", "Postural", "Acci√≥n"]:
            res, imgs = analizar_mediciones(test_name, mediciones)
            resultados.extend(res)
            imagenes.extend(imgs)

        comparativo, diagnostico_final = diagnostico_global(resultados)

        # Mostrar resumen del diagn√≥stico
        st.success(f"ü©∫ Diagn√≥stico Global Sugerido: **{diagnostico_final}**")

        # Generar el PDF
        pdf = generar_pdf(datos_personales, resultados, comparativo, diagnostico_final, imagenes, incluir_graficos=True)

        # Convertir a bytes
        pdf_output = BytesIO()
        pdf.output(pdf_output)
        pdf_output.seek(0)

        nombre_paciente = datos_personales.columns[0] if datos_personales.columns[0] else "informe"
        nombre_pdf = f"Informe_{nombre_paciente.replace(' ', '_')}.pdf"

        st.download_button(
            label="üìÑ Descargar Informe PDF",
            data=pdf_output,
            file_name=nombre_pdf,
            mime="application/pdf"
        )

    except Exception as e:
        st.error(f"Ocurri√≥ un error al procesar el archivo: {e}")