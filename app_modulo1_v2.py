# -*- coding: utf-8 -*-
"""APP_modulo1_V2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OB-DwNEqY1MGsuMVP8w43wr4b87h2_jD
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq
from fpdf import FPDF
import tempfile
import os
from datetime import datetime

# Función para procesar cada archivo y devolver info útil
def procesar_archivo(uploaded_file):
    datos_completos = pd.read_csv(uploaded_file)
    datos_personales = datos_completos.iloc[0, :].to_frame().T
    datos_personales.reset_index(drop=True, inplace=True)
    mediciones = datos_completos.iloc[1:, :]
    mediciones = mediciones[['Acel_X', 'Acel_Y', 'Acel_Z', 'GiroX', 'GiroY', 'GiroZ']]
    mediciones = mediciones.apply(pd.to_numeric, errors='coerce')
    return datos_personales, mediciones

# Función para calcular parámetros y gráficos
@st.cache_data
def calcular_parametros(test_name, mediciones):
    sample_rate = 200
    n = len(mediciones)
    resultados = []
    imagenes = []
    for eje in ['Acel_X', 'Acel_Y', 'Acel_Z']:
        señal = mediciones[eje].dropna().values
        fft_valores = fft(señal)
        frecuencias = fftfreq(n, d=1/sample_rate)
        amplitudes = np.abs(fft_valores)

        frecuencias_positivas = frecuencias[:n // 2]
        amplitudes_positivas = amplitudes[:n // 2]
        filtro = (frecuencias_positivas >= 1) & (frecuencias_positivas <= 14)
        frecuencias_filtradas = frecuencias_positivas[filtro]
        amplitudes_filtradas = amplitudes_positivas[filtro]

        frecuencia_dominante = frecuencias_filtradas[np.argmax(amplitudes_filtradas)]
        amplitudes_cm = (amplitudes_filtradas / ((2 * np.pi * frecuencias_filtradas) ** 2)) * 100
        amplitudes_cm = np.nan_to_num(amplitudes_cm)

        varianza = np.var(señal)
        rms = np.sqrt(np.mean(señal**2))
        max_desplazamiento = np.max(amplitudes_cm)

        resultados.append([test_name, eje, frecuencia_dominante, varianza, rms, max_desplazamiento])

        fig, ax = plt.subplots()
        ax.plot(frecuencias_filtradas, amplitudes_cm)
        ax.set_title(f"FFT {test_name} - {eje}")
        ax.set_xlabel("Frecuencia (Hz)")
        ax.set_ylabel("Amplitud (cm)")
        ax.grid(True)

        img_path = tempfile.NamedTemporaryFile(delete=False, suffix=".png").name
        fig.savefig(img_path)
        plt.close(fig)
        imagenes.append((test_name, eje, img_path))

    return resultados, imagenes

# Diagnóstico
def diagnostico_global(resultados):
    posibles_diagnosticos = []
    comparativo = []
    for fila in resultados:
        test, eje, freq, _, _, max_disp = fila
        if 4 <= freq <= 6 and max_disp > 1:
            diag = "Posible Parkinson"
            posibles_diagnosticos.append("Parkinson")
        elif 6 < freq <= 12 and max_disp <= 1.5:
            diag = "Posible Temblor Esencial"
            posibles_diagnosticos.append("Temblor Esencial")
        else:
            diag = "Normal"
        comparativo.append([test, eje, diag])

    if posibles_diagnosticos.count("Parkinson") > posibles_diagnosticos.count("Temblor Esencial"):
        return comparativo, "Posible Parkinson"
    elif posibles_diagnosticos.count("Temblor Esencial") > posibles_diagnosticos.count("Parkinson"):
        return comparativo, "Posible Temblor Esencial"
    else:
        return comparativo, "Normal"

# PDF
def generar_pdf(datos_personales, resultados, comparativo, global_diag, imagenes):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Informe de Diagnóstico de Temblor", ln=True, align='C')
    pdf.set_font("Arial", '', 10)
    pdf.multi_cell(0, 10, "Análisis de pruebas: reposo, postural y acción.\n")

    pdf.cell(0, 10, "\nInformación del Paciente:", ln=True)
    for col in datos_personales.columns:
        val = datos_personales[col].values[0] if not pd.isna(datos_personales[col].values[0]) else "Sin info"
        pdf.cell(0, 10, f"{col}: {val}", ln=True)

    pdf.cell(0, 10, "\nResultados:", ln=True)
    pdf.set_font("Arial", 'B', 8)
    pdf.cell(30, 10, "Test", 1)
    pdf.cell(20, 10, "Eje", 1)
    pdf.cell(40, 10, "Freq. Dom (Hz)", 1)
    pdf.cell(30, 10, "Varianza", 1)
    pdf.cell(20, 10, "RMS", 1)
    pdf.cell(50, 10, "Max. Desplaz. (cm)", 1)
    pdf.ln()
    pdf.set_font("Arial", '', 8)
    for r in resultados:
        pdf.cell(30, 10, r[0], 1)
        pdf.cell(20, 10, r[1], 1)
        pdf.cell(40, 10, f"{r[2]:.2f}", 1)
        pdf.cell(30, 10, f"{r[3]:.2f}", 1)
        pdf.cell(20, 10, f"{r[4]:.2f}", 1)
        pdf.cell(50, 10, f"{r[5]:.2f}", 1)
        pdf.ln()

    pdf.add_page()
    pdf.set_font("Arial", 'B', 10)
    pdf.cell(0, 10, "Diagnóstico Comparativo:", ln=True)
    pdf.set_font("Arial", '', 9)
    for fila in comparativo:
        pdf.cell(0, 10, f"{fila[0]} - {fila[1]}: {fila[2]}", ln=True)
    pdf.cell(0, 10, f"\nDiagnóstico Global: {global_diag}", ln=True)

    for test, eje, img in imagenes:
        pdf.add_page()
        pdf.cell(0, 10, f"Gráfico - {test} - {eje}", ln=True)
        pdf.image(img, x=10, y=20, w=180)

    temp_path = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf").name
    pdf.output(temp_path)
    return temp_path

# Interfaz Streamlit
st.title("🧠 Análisis de Temblor - Test Clínico 1")
st.markdown("Cargá los tres archivos CSV correspondientes a Reposo, Postural y Acción para comenzar el análisis.")

with st.form("upload_form"):
    archivo_reposo = st.file_uploader("Archivo Reposo", type="csv")
    archivo_postural = st.file_uploader("Archivo Postural", type="csv")
    archivo_accion = st.file_uploader("Archivo Acción", type="csv")
    submitted = st.form_submit_button("Comenzar Análisis")

if submitted and archivo_reposo and archivo_postural and archivo_accion:
    st.success("Archivos cargados correctamente. Procesando...")

    datos_personales, mediciones_reposo = procesar_archivo(archivo_reposo)
    _, mediciones_postural = procesar_archivo(archivo_postural)
    _, mediciones_accion = procesar_archivo(archivo_accion)

    resultados = []
    imagenes = []
    for nombre, datos in zip(["Reposo", "Postural", "Acción"], [mediciones_reposo, mediciones_postural, mediciones_accion]):
        res, imgs = calcular_parametros(nombre, datos)
        resultados.extend(res)
        imagenes.extend(imgs)

    comparativo, global_diag = diagnostico_global(resultados)
    path_pdf = generar_pdf(datos_personales, resultados, comparativo, global_diag, imagenes)

    st.success("Análisis finalizado.")

    nombre_paciente = datos_personales.iloc[0, 0] if not datos_personales.empty else "Informe"
    nombre_pdf = f"Informe_Temblor_{nombre_paciente.replace(' ', '_')}.pdf"

    with open(path_pdf, "rb") as f:
    st.download_button("📄 Descargar Informe PDF", f, file_name=nombre_pdf)